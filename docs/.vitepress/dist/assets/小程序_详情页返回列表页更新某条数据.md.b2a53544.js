import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.b637c96f.js";const _=JSON.parse('{"title":"详情页返回列表页更新某条数据","description":"","frontmatter":{"title":"详情页返回列表页更新某条数据"},"headers":[],"relativePath":"小程序/详情页返回列表页更新某条数据.md","filePath":"小程序/详情页返回列表页更新某条数据.md","lastUpdated":1694660988000}'),p={name:"小程序/详情页返回列表页更新某条数据.md"},o=l(`<h1 id="详情页返回列表页更新某条数据" tabindex="-1">详情页返回列表页更新某条数据 <a class="header-anchor" href="#详情页返回列表页更新某条数据" aria-label="Permalink to &quot;详情页返回列表页更新某条数据&quot;">​</a></h1><ul><li>当详情页数据修改成功后，返回列表页时，直接修改列表页某条数据（不调用接口更新，保留滚动位置）</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> parmas </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data.detailMessage.id,</span></span>
<span class="line"><span style="color:#E1E4E8;">  state: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data.auditTitle </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;通过&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  opinion: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.data.reason</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> pages</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getCurrentPages</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> prevPage </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> pages[pages.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> prevPage.data.tableData.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(parmas.id </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> prevPage.data.tableData[i].id) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    prevPage.</span><span style="color:#B392F0;">setData</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">      [</span><span style="color:#9ECBFF;">\`tableData[\${</span><span style="color:#E1E4E8;">i</span><span style="color:#9ECBFF;">}].state\`</span><span style="color:#E1E4E8;">]: parmas.state</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> parmas </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data.detailMessage.id,</span></span>
<span class="line"><span style="color:#24292E;">  state: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data.auditTitle </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;通过&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  opinion: </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.data.reason</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> pages</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getCurrentPages</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> prevPage </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> pages[pages.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> prevPage.data.tableData.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;">; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(parmas.id </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> prevPage.data.tableData[i].id) {</span></span>
<span class="line"><span style="color:#24292E;">    prevPage.</span><span style="color:#6F42C1;">setData</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">      [</span><span style="color:#032F62;">\`tableData[\${</span><span style="color:#24292E;">i</span><span style="color:#032F62;">}].state\`</span><span style="color:#24292E;">]: parmas.state</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,3),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const g=s(p,[["render",t]]);export{_ as __pageData,g as default};
